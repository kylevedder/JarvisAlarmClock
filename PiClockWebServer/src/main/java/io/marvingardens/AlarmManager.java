package io.marvingardens;

import java.io.File;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AlarmManager {

	private static final String TEMP_CRON_FILE = "temp.cron";
	private static final String ALARM_COMMENT_PREFIX = "Generated by PiAlarm, do not modify!";
	private String script;

	public AlarmManager(String script) {
		this.script = script;
	}

	public void schedule(Alarm alarm) {
		String cronString = createCronString(alarm, script);

		File tempCronFile = new File(TEMP_CRON_FILE);

		StringBuffer output = Utils.executeCommand("crontab -l");

		output.append("#" + ALARM_COMMENT_PREFIX + "\n");
		output.append(cronString + "\n");

		Utils.writeToFile(tempCronFile, output);

		Utils.executeCommand("crontab " + TEMP_CRON_FILE);
	}

	public List<Alarm> getAllScheduled() {

		List<Alarm> alarmList = new LinkedList<>();
		String crontab = Utils.executeCommand("crontab -l").toString();

		String[] lines = crontab.split("\n");
		for (String line : lines) {
			line = line.trim();
			if (line.startsWith("#")) {
				continue;
			}

			// line of interest
			if (line.contains(script)) {

				Alarm alarm = parseLine(line);
				// System.out.println(alarm);
				alarmList.add(alarm);
			}
		}

		return alarmList;
	}

	public void deleteAlarm(Alarm alarmToDelete) {

		File tempCronFile = new File(TEMP_CRON_FILE);

		String crontab = Utils.executeCommand("crontab -l").toString();

		StringBuffer output = new StringBuffer();
		List<String> outputLines = new LinkedList<>();

		String[] linesArray = crontab.split("\n");
		List<String> lines = Arrays.asList(linesArray);
		for (String line : lines) {
			line = line.trim();

			//gotta love short circuts
			if (line.startsWith("#") || !line.contains(script) || !parseLine(line).equals(alarmToDelete)) {
				outputLines.add(line + "\n");
			} else {
				if (outputLines.size() >= 1 && outputLines.get(outputLines.size() - 1).trim().startsWith("#")) {
					outputLines.remove(outputLines.size() - 1);
				}
			}

		}

		for (String line : outputLines) {
			output.append(line);
		}

		Utils.writeToFile(tempCronFile, output);

		Utils.executeCommand("crontab " + TEMP_CRON_FILE);
	}

	private Alarm parseLine(String line) {
		// parse out info
		String[] splitLine = line.split(" ");
		// grab minute
		int min = Integer.parseInt(splitLine[0]);
		// grab hour
		int hour = Integer.parseInt(splitLine[1]);

		// grab day indexes
		List<Integer> days = new LinkedList<>();
		String[] dayStrings = splitLine[4].split(",");
		for (String day : dayStrings) {
			days.add(Integer.parseInt(day));
		}

		// grab name and location
		Pattern quoteMatcher = Pattern.compile("([\"'])(?:(?=(\\\\?))\\2.)*?\\1");

		// System.out.println(line);
		Matcher matcher = quoteMatcher.matcher(line);

		String zip = "";
		String name = "";
		if (matcher.find() && matcher.find()) {
			// System.out.print("found: ");
			name = matcher.group(0);
			// System.out.println(name);
			if (matcher.find()) {
				// System.out.print("found: ");
				zip = matcher.group(0);
				// System.out.println(townName);
			}
		}

		name = name.replaceAll("\"", "");
		zip = zip.replaceAll("\"", "");

		return new Alarm(name, zip, hour, min, days);
	}

	private String createCronString(Alarm alarm, String script) {
		String dayString = "";
		if (alarm.getDays().isEmpty()) {
			dayString = "*";
		} else {
			List<Integer> days = alarm.getDays();
			dayString += days.get(0);
			for (int i = 1; i < days.size(); i++) {
				dayString += "," + days.get(i);
			}
		}
		return String.format("%d %d * * %s %s \"%s\" \"%s\"", alarm.getMin(), alarm.getHour(), dayString, script,
				alarm.getName(), alarm.getZip());
	}

}
